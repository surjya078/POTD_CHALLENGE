Design a data structure that works like a LRU Cache. Here cap denotes the capacity of the cache and Q denotes the number of queries. Query can be of two types:

1. PUT x y: sets the value of the key x with value y
2. GET x: gets the key of x if present else returns -1.

The LRUCache class has two methods get() and put() which are defined as follows.

1. get(key): returns the value of the key if it already exists in the cache otherwise returns -1.
2. put(key, value): if the key is already present, update its value. If not present, add the key-value pair to the cache. If the cache reaches its 
capacity it should remove the least recently used item before inserting the new item.
3. In the constructor of the class the capacity of the cache should be initialized.

Examples:

Input: cap = 2, Q = 2, Queries = [["PUT", 1, 2], ["GET", 1]]
Output: [2]
Explanation: Cache Size = 2
["PUT", 1, 2] will insert the key-value pair (1, 2) in the cache,
["GET", 1] will print the value corresponding to Key 1, ie 2.
Input: cap = 2, Q = 8, Queries = [["PUT", 1, 2], ["PUT", 2, 3], ["PUT", 1, 5], ["PUT", 4, 5], ["PUT", 6, 7], ["GET", 4], ["PUT", 1, 2], ["GET", 3]]
Output: [5, -1]
Explanation: Cache Size = 2
["PUT", 1, 2] will insert the pair (1,2) in the cache.
["PUT", 2, 3] will insert the pair (2,3) in the cache: 1->2, 2->3(the most recently used one is kept at the rightmost position) 
["PUT", 1, 5] will replace the value of 1 from 2 to 5 : 2 -> 3, 1 -> 5
["PUT", 4, 5] : 1 -> 5, 4 -> 5 (Cache size is 2, hence we delete the least recently used key-value pair)
["PUT", 6, 7] : 4 -> 5, 6 -> 7 
["GET", 4] : Prints 5 (The cache now looks like 6 -> 7, 4->5)
["PUT", 1, 2] : 4 -> 5, 1 -> 2  (Cache size is 2, hence we delete the least recently used key-value pair)
["GET", 3] : No key value pair having key = 3. Hence, -1 is printed.



ANSWER :-

class LRUCache 
{
    private static class Node 
    {
        int key, value;
        Node prev, next;

        Node(int key, int value) 
        {
            this.key = key;
            this.value = value;
        }
    }
    private final int capacity;
    private final Map<Integer, Node> cache;
    private final Node head, tail;
    // Constructor for initializing the cache capacity with the given value.
    LRUCache(int cap) 
    {
        this.capacity = cap;
        this.cache = new HashMap<>();
        this.head = new Node(-1, -1); // Dummy head
        this.tail = new Node(-1, -1); // Dummy tail
        head.next = tail;
        tail.prev = head;
    }
    // Function to return value corresponding to the key.
    public int get(int key) 
    {
        if (!cache.containsKey(key)) {
            return -1;
        }
        Node node = cache.get(key);
        moveToHead(node);
        return node.value;
    }
    // Function for storing key-value pair.
    public void put(int key, int value) 
    {
        if (cache.containsKey(key)) 
        {
            Node node = cache.get(key);
            node.value = value; // Update the value
            moveToHead(node);  // Mark as recently used
        } else 
        {
            if (cache.size() == capacity) 
            {
                removeLeastRecentlyUsed();
            }
            Node newNode = new Node(key, value);
            cache.put(key, newNode);
            addToHead(newNode);
        }
    }
    // Helper function to move a node to the head.
    private void moveToHead(Node node) 
    {
        removeNode(node);
        addToHead(node);
    }
    // Helper function to remove a node.
    private void removeNode(Node node) 
    {
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }
    // Helper function to add a node to the head.
    private void addToHead(Node node) 
    {
        node.next = head.next;
        node.prev = head;
        head.next.prev = node;
        head.next = node;
    }
    // Helper function to remove the least recently used node.
    private void removeLeastRecentlyUsed() 
    {
        Node lru = tail.prev;
        removeNode(lru);
        cache.remove(lru.key);
    }
}
