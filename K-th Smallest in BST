Given a BST and an integer k, the task is to find the kth smallest element in the BST. If there is no kth smallest element present then return -1.

Examples:

Input: root = [2, 1, 3], k = 2
       2 
     /  \
    1    3
Output: 2
Explanation: 2 is the 2nd smallest element in the BST.

Input: root = [2, 1, 3], k = 5
       2 
     /  \
    1    3
Output: -1
Explanation: There is no 5th smallest element in the BST as the size of BST is 3.

Input: root = [20, 8, 22, 4, 12, N, N, N, N, 10, 14], k = 3
           20
         /    \
        8      22
      /   \
     4    12
         /  \
        10   14
Output: 10
Explanation: 10 is the 3rd smallest element in the BST.


ANSWER :-

// User function Template for Java

// class Node
// {
//     int data;
//     Node left, right;

//     public Node(int d)
//     {
//         data = d;
//         left = right = null;
//     }
// }

class Solution {
    // Return the Kth smallest element in the given BST
      public int kthSmallest(Node root, int k) {
        Stack<Node> stack = new Stack<>();
        Node current = root;

        while (current != null || !stack.isEmpty()) {
            // Traverse to the leftmost node
            while (current != null) {
                stack.push(current);
                current = current.left;
            }

            // Process the current node
            current = stack.pop();
            k--; // Decrement k

            // If k == 0, we've found the k-th smallest element
            if (k == 0) {
                return current.data;
            }

            // Move to the right subtree
            current = current.right;
        }

        // If k is out of bounds, return -1 (or handle as per requirements)
        return -1;
    }
}
