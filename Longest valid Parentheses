Given a string str consisting of opening and closing parenthesis '(' and ')'. Find length of the longest valid parenthesis substring.

A parenthesis string is valid if:

For every opening parenthesis, there is a closing parenthesis.
Opening parenthesis must be closed in the correct order.
Examples :

Input: str = ((()
Output: 2
Explaination: The longest valid parenthesis substring is "()".
Input: str = )()())
Output: 4 
Explaination: The longest valid parenthesis substring is "()()".


ANSWER :-

class Solution{
    static int maxLength(String S){
        int n = S.length(); 
        int[] dp = new int[n];
        Arrays.fill(dp, 0);
        Stack<Integer> st = new Stack<>();
        int ans = 0;
        int currMax = 0;
        for(int i = 0; i < n; i++){
            if(!st.isEmpty()){
                char curr = S.charAt(i);
                int tidx = st.peek();
                char top = S.charAt(tidx); 
                if(curr == ')' && top == '('){
                    if(tidx > 0){
                        currMax = i-tidx+1+dp[tidx-1];
                        ans = Math.max(currMax, ans);
                    } else {
                        currMax = i-tidx+1;
                        ans = Math.max(currMax, ans);    
                    }
                    dp[i] = currMax;
                    st.pop();
                } else{
                    st.push(i);   
                }
            } else{
                st.push(i);
            }
        }
        return ans;
    }
}
