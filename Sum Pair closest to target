Given an array arr[] and a number target, find a pair of elements (a, b) in arr[], where a<=b whose sum is closest to target.

Note: Return the pair in sorted order and if there are multiple such pairs return the pair with maximum absolute difference. If no such pair exists return an empty array.

Examples:

Input: arr[] = [10, 30, 20, 5], target = 25
Output: [5, 20]
Explanation: As 5 + 20 = 25 is closest to 25. 

Input: arr[] = [5, 2, 7, 1, 4], target = 10
Output: [2, 7]
Explanation: As (4, 7) and (2, 7) both are closest to 10, but absolute difference of (2, 7) is 5 and (4, 7) is 3. Hence, [2, 7] has maximum absolute difference and closest to target.  

Input: arr[] = [10], target = 10
Output: []
Explanation: As the input array has only 1 element, return an empty array.


ANSWER :-

class Solution {
    public List<Integer> sumClosest(int[] arr, int target) {
        // code here
         Arrays.sort(arr);
        int diff=Integer.MAX_VALUE;
        int n=arr.length;
        int a=arr[0];
       int b=arr[n-1];
        List<Integer> ans=new ArrayList<>();
        if(n<=1)
        return ans;
        
        int i=0;
        int j=n-1;
        while(i<j)
        {
            int sum=arr[i]+arr[j];
            int currDiff=Math.abs(sum-target);
            //if the currDiff is equal to diff
            if(diff==currDiff)
            {
                if(Math.abs(arr[i]-arr[j])>Math.abs(a-b))
                {
                    a=arr[i];
                    b=arr[j];
                }
            }
            else if(currDiff<diff)
            {
                diff=currDiff;
                a=arr[i];
                b=arr[j];
            }
            if(target<sum)
            {
                j--;
            }
            else{
                i++;
            }
        }
        ans.add(a);
        ans.add(b);
    return ans;
    }
}
