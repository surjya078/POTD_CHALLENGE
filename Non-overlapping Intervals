Given a 2D array intervals[][] of representing intervals where intervals [i] = [starti, endi ]. 
Return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

Examples:

Input: intervals[][] = [[1, 2], [2, 3], [3, 4], [1, 3]]
Output: 1
Explanation: [1, 3] can be removed and the rest of the intervals are non-overlapping.

Input: intervals[][] = [[1, 3], [1, 3], [1, 3]]
Output: 2
Explanation: You need to remove two [1, 3] to make the rest of the intervals non-overlapping.

Input: intervals[][] = [[1, 2], [5, 10], [18, 35], [40, 45]] 
Output: 0 
Explanation: All ranges are already non overlapping.

ANSWER :-

class Solution {
    static int minRemoval(int intervals[][]) {
        // code here
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[1], b[1]));
        int last = 0;
        int ans = 0;
         int N = intervals.length;
        for(int i =1;i<N;i++){
            if(intervals[i][0]<intervals[last][1])ans++;
              else last = i;
            }
        return ans;
    }
}
