he n-queens puzzle is the problem of placing n queens on a (nÃ—n) chessboard such that no two queens can attack each other.
Given an integer n, find all distinct solutions to the n-queens puzzle. Each solution contains distinct board configurations of the n-queens placement, 
where the solutions are a permutation of [1,2,3..n] in increasing order, here the number in the ith place denotes that the ith-column queen is placed
in the row with that number. For eg below figure represents a chessboard [3 1 4 2].

Examples:

Input: 1
Output: [1]
Explaination: Only one queen can be placed in the single cell available.

Input: 4
Output: [[2 4 1 3 ],[3 1 4 2 ]]
Explaination: These are the 2 possible solutions.

ANSWERS :-

class Solution {
     public boolean validate(int i,int j,int b[][]){
        int ci=i,cj=j;
        while(cj>=0) if(b[ci][cj--]==1) return false;
        ci=i;cj=j;
        while(ci>=0 && cj>=0) if(b[ci--][cj--]==1) return false;
        ci=i;cj=j;
        while(ci<b.length && cj>=0) if(b[ci++][cj--]==1) return false;
        return true;
    }
    public void dfs(int j,ArrayList<Integer> al,ArrayList<ArrayList<Integer>> ans,int n,int b[][]){
        if(j==n){
            ans.add(new ArrayList<>(al));
            return;
        }
        for(int i=0;i<n;i++){
            if(validate(i,j,b)){
                b[i][j]=1;
                al.add(i+1);
                dfs(j+1,al,ans,n,b);
                b[i][j]=0;
                al.remove(al.size()-1);
            }
        }
    }
    public ArrayList<ArrayList<Integer>> nQueen(int n) {
        // code here
        ArrayList<ArrayList<Integer>> ans=new ArrayList<>();
        int[][] b=new int[n][n];
        dfs(0,new ArrayList<>(),ans,n,b);
        return ans;
    }
}
