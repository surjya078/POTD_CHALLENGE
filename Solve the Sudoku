Given an incomplete Sudoku configuration in terms of a 9x9  2-D interger square matrix, mat[][], the task is to solve the Sudoku. 
It is guaranteed that the input Sudoku will have exactly one solution.

A sudoku solution must satisfy all of the following rules:

1. Each of the digits 1-9 must occur exactly once in each row.
2. Each of the digits 1-9 must occur exactly once in each column.
3. Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid. 

Note: Zeros represent blanks to be filled with numbers 1-9, while non-zero cells are fixed and cannot be changed.

Examples: 
 
Input: mat[][] = 

Output:

Explanation: Each row, column and 3 x 3 box of the output matrix contains unique numbers.
Input: mat[][] = 

Output:

Explanation: Each row, column and 3 x 3 box of the output matrix contains unique numbers.


ANSWER :-

class Solution 
{
    // Function to find a solved Sudoku.
    static void solveSudoku(int[][] mat) 
    {
        solve(mat);
    }
    // Function to check if placing 'num' at mat[row][col] is valid
    static boolean isValid(int[][] mat, int row, int col, int num) 
    {
        // Check row and column
        for (int i = 0; i < 9; i++) 
        {
            if (mat[row][i] == num || mat[i][col] == num) 
            {
                return false;
            }
        }
        // Check 3x3 sub-grid
        int startRow = (row / 3) * 3;
        int startCol = (col / 3) * 3;
        for (int i = 0; i < 3; i++) 
        {
            for (int j = 0; j < 3; j++) 
            {
                if (mat[startRow + i][startCol + j] == num) 
                {
                    return false;
                }
            }
        }
        return true;
    }
    // Recursive function to solve Sudoku using backtracking
    static boolean solve(int[][] mat) 
    {
        for (int row = 0; row < 9; row++) 
        {
            for (int col = 0; col < 9; col++) 
            {
                if (mat[row][col] == 0) 
                {  // Empty cell found
                    for (int num = 1; num <= 9; num++) 
                    {
                        if (isValid(mat, row, col, num)) 
                        {
                            mat[row][col] = num; // Place the number

                            if (solve(mat)) 
                            {  // Recursively try to solve
                                return true;
                            }
                            mat[row][col] = 0; // Backtrack if no solution found
                        }
                    }
                    return false; // If no number fits, return false
                }
            }
        }
        return true; 
    }
}
