Given an array arr[], where each element is at 
most k away from its target position, you need to 
sort the array optimally.

Note: DO NOT use STL sort() function for this question.

Examples:

Input: arr[] = [6, 5, 3, 2, 8, 10, 9], k = 3
Output: [2, 3, 5, 6, 8, 9, 10]
Explanation: The sorted array will be 
2 3 5 6 8 9 10

Input: arr[]= [1, 4, 5, 2, 3, 6, 7, 8, 9, 10], k = 2
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Explanation: The sorted array will be 
1 2 3 4 5 6 7 8 9 10


ANSWER :-

class Solution {
    // Non-static method, so you need to call it on an instance of the class
    public void nearlySorted(int[] arr, int k) {
        // code
        TreeMap<Integer,Integer>mp = new TreeMap<>();
        k += 1;
        int n = arr.length;
        for(int i = 0; i < k; i++){
            mp.put(arr[i],mp.getOrDefault(arr[i],0) + 1);
        }
        int curr = 0;
        for(int i = k; i < n; i++){
            arr[curr++] = mp.firstKey();
            if(mp.get(mp.firstKey()) > 1)
                mp.put(mp.firstKey(),mp.get(mp.firstKey()) - 1);
            else mp.remove(mp.firstKey());
            mp.put(arr[i],mp.getOrDefault(arr[i],0) + 1);
        }
        for(Map.Entry<Integer,Integer>e : mp.entrySet()){
            int kk = e.getKey();
            int v = e.getValue();
            while(v-- > 0) arr[curr++] = kk;
        }
    }
}
