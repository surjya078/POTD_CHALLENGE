Given a sorted and rotated array arr[] of distinct elements, the task is to find the index of a target key. Return -1 if the key is not found.

Examples :

Input: arr[] = [5, 6, 7, 8, 9, 10, 1, 2, 3], key = 3
Output: 8
Explanation: 3 is found at index 8.
Input: arr[] = [3, 5, 1, 2], key = 6
Output: -1
Explanation: There is no element that has value 6.
Input: arr[] = [33, 42, 72, 99], key = 42
Output: 1
Explanation: 42 is found at index 1.


ANSWER :-

class Solution {
    int search(int[] arr, int target) {
        int left = 0, right = arr.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            // Check if mid is the target
            if (arr[mid] == target) {
                return mid;
            }

            // Determine which part is sorted
            if (arr[left] <= arr[mid]) { // Left half is sorted
                if (target >= arr[left] && target < arr[mid]) {
                    right = mid - 1; // Target lies in the left half
                } else {
                    left = mid + 1; // Target lies in the right half
                }
            } else { // Right half is sorted
                if (target > arr[mid] && target <= arr[right]) {
                    left = mid + 1; // Target lies in the right half
                } else {
                    right = mid - 1; // Target lies in the left half
                }
            }
        }
        return -1;
    }
}
