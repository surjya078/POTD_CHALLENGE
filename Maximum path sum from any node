Given a binary tree, the task is to find the maximum path sum. The path may start and end at any node in the tree.

Examples:

Input: root[] = [10, 2, 10, 20, 1, N, -25, N, N, N, N, 3, 4]
Output: 42
Explanation: 
            
Max path sum is represented using green colour nodes in the above binary tree.

Input: root[] = [-17, 11, 4, 20, -2, 10]
Output: 31
Explanation: 

Max path sum is represented using green colour nodes in the above binary tree.


ANSWER :-

class Solution
{
    int maxSum = Integer.MIN_VALUE;
    //Function to return maximum path sum from any node in a tree.
    int findMaxSum(Node node)
    {
        //your code goes here
        if(node == null)
            return 0;
        int MaxSum = traverse(node);
        
        return maxSum;
    }
    
    public int traverse(Node node) {
        if(node == null)
            return 0;
            
        int ls =  traverse(node.left);
        
        int rs =  traverse(node.right);
        
        int single_max = Math.max((node.data + Math.max(ls, rs) ),node.data);
        
        maxSum = Math.max(Math.max(single_max, node.data + ls + rs), maxSum);
       
        return single_max;
        
    }
}
