Given an array of integers arr[] in a circular fashion. 
Find the maximum subarray sum that we can get if we assume the array to be circular.

Examples:
  
Input: arr[] = [8, -8, 9, -9, 10, -11, 12] 
Output: 22 
Explanation: Starting from the last element of the array, i.e, 12, and moving in a circular fashion, 
we have max subarray as 12, 8, -8, 9, -9, 10, which gives maximum sum as 22. 

Input: arr[] = [10, -3, -4, 7, 6, 5, -4, -1] 
Output: 23
Explanation: Maximum sum of the circular subarray is 23. The subarray is [7, 6, 5, -4, -1, 10].
  
Input: arr[] = [-1, 40, -14, 7, 6, 5, -4, -1]  
Output: 52
Explanation: Circular Subarray [7, 6, 5, -4, -1, -1, 40] has the maximum sum, which is 52.


ANSWER :-

class Solution {
    // Function to find the maximum circular subarray sum.
    public int circularSubarraySum(int arr[]) {
        int n = arr.length;

        int maxKadane = kadane(arr);

        int totalSum = 0;
        for (int i = 0; i < n; i++) {
            totalSum += arr[i];
            arr[i] = -arr[i];
        }

        int minSubarraySum = -kadane(arr);

        for (int i = 0; i < n; i++) {
            arr[i] = -arr[i];
        }

        int maxCircular = totalSum - minSubarraySum;

        if (maxCircular == 0) {
            return maxKadane;
        }

        return Math.max(maxKadane, maxCircular);
    }

    private int kadane(int[] arr) {
        int maxSum = Integer.MIN_VALUE;
        int sum = 0;

        for (int num : arr) {
            sum = Math.max(num, sum + num);
            maxSum = Math.max(maxSum, sum);
        }

        return maxSum;
    }
}

