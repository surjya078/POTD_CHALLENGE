Given two strings s1 and s2. Return a minimum number
of times s1 has to be repeated such that s2 is a substring 
of it. If s2 can never be a substring then return -1.

Note: Both the strings contain only lowercase letters.

Examples:

Input: s1 = "ww", s2 = "www"
Output: 2
Explanation: Repeating s1 two times (wwww), s2 is a substring of it.
Input: s1 = "abcd", s2 = "cdabcdab" 
Output: 3 
Explanation: Repeating s1 three times (abcdabcdabcd), s2 is a substring of it. s2 is not a substring of s2 when it is repeated less than 3 times.
Input: s1 = "ab", s2 = "cab"
Output: -1
Explanation: No matter how many times we repeat s1, we can't get a string such that s2 is a substring of it.


ANSWER :-

class Solution {
    static int minRepeats(String s1, String s2) {
        for(int i = 0; i<s2.length(); i++){
            if(!s1.contains(String.valueOf(s2.charAt(i)))){
                return -1;
            }
            
        }
        
        int count = 0;
        int stop = (s2.length()/s1.length())+1;
        StringBuilder str = new StringBuilder();
        while(count<=stop){
            str.append(s1);
            count++;
            if(str.toString().contains(s2)){
                return count;
            }
        }
        return -1;
    }
}
