Given a binary tree and a node data called target. Find the minimum time required to burn the complete binary tree if the target is set on fire. It is known that in 1 second all nodes connected to a given node get burned. That is its left child, right child, and parent.
Note: The tree contains unique values.


Examples : 

Input:      
          1
        /   \
      2      3
    /  \      \
   4    5      6
       / \      \
      7   8      9
                   \
                   10
Target Node = 8
Output: 7
Explanation: If leaf with the value 8 is set on fire. 
After 1 sec: 5 is set on fire.
After 2 sec: 2, 7 are set to fire.
After 3 sec: 4, 1 are set to fire.
After 4 sec: 3 is set to fire.
After 5 sec: 6 is set to fire.
After 6 sec: 9 is set to fire.
After 7 sec: 10 is set to fire.
It takes 7s to burn the complete tree.
Input:      
          1
        /   \
      2      3
    /  \      \
   4    5      7
  /    / 
 8    10
Target Node = 10
Output: 5


ANSWER :-

class Solution
{
    /*class Node {
    	int data;
    	Node left;
    	Node right;
    
    	Node(int data) {
    		this.data = data;
    		left = null;
    		right = null;
    	}
    }*/
    
    public static int minTime(Node root, int target) 
    {
        // Your code goes here
        Map<Node,Node> map=new HashMap<>();
        preorder(root,null,map);
        
        Node tar = findTargetNode(root,target);
        
        Set<Node> vis=new HashSet<>();
        vis.add(tar);
        
        Queue<Node> q=new LinkedList<>();
        q.add(tar);
        
        int level=0;
        
        while(!q.isEmpty()){
            
            int size=q.size();
            for(int i=0;i<size;i++){
                
                Node pop = q.remove();
                Node par=map.get(pop), left=pop.left, right=pop.right;
                
                if(par!=null && !vis.contains(par)){
                    vis.add(par);
                    q.add(par);
                }
                if(left!=null && !vis.contains(left)){
                    vis.add(left);
                    q.add(left);
                }
                if(right!=null && !vis.contains(right)){
                    vis.add(right);
                    q.add(right);
                }
                
            }
            level++;
        }
        return level-1;
    }
    static Node findTargetNode(Node node,int x){
        if(node==null || node.data==x)  return node;
        
        Node left = findTargetNode(node.left,x);
        if(left!=null)  return left;
        
        return findTargetNode(node.right,x);
    }
    
    static void preorder(Node node,Node par,Map<Node,Node> map){
        if(node==null)  return;
        
        map.put(node,par);
        
        preorder(node.left,node,map);
        preorder(node.right,node,map);
    }
}
