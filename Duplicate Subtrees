Given a binary tree, your task is to find all duplicate subtrees from the given binary tree.

Duplicate Subtree : Two trees are duplicates if they have the same structure with the same node values.

Note:  Return the root of each tree in the form of a list array & the driver code will print the tree in pre-order tree traversal in lexicographically increasing order.

Examples:

Input :        5
            4        6
          3    4
             3   6
 
Output: 2 4   
        4
Explanation: The above tree have two duplicate subtrees.i.e 
  2
 /
4  and 4. Therefore, you need to return the above tree root in the form of a list.  


ANSWER:-

class Solution {
     public List<Node> printAllDups(Node root) {
        // code here
        String result = "";
        List<Node> list = new ArrayList<>();
        HashMap<String,Integer> map = new HashMap<>();
        pre_order(root,map,list);
        return list;
    }
    
    String pre_order(Node root,HashMap<String,Integer> map,List<Node> list){
        String result = "";
        if(root == null)
            result = "#";
        else if(root != null){
            result = pre_order(root.left,map,list)+","+root.data+","+pre_order(root.right,map,list);
            map.put(result,map.getOrDefault(result,0)+1);
            if(map.get(result) == 2)
                   list.add(root);
        }
      return result;    
    }
}
