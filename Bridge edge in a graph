Given an undirected graph with V vertices numbered from 0 to V-1 and E edges, represented by 2d array edges[][], where edges[i]=[u,v] represents the edge between the vertices u and v. 
Determine whether a specific edge between two vertices (c, d) is a bridge.

Note:

An edge is called a bridge if removing it increases the number of connected components of the graph.

if thereâ€™s only one path between c and d (which is the edge itself), then that edge is a bridge.

Examples :

class Solution
{
    //Function to find if the given edge is a bridge in graph.
    //do BFS or BFS before & after removing the edge 
    static void bfs(int src, ArrayList<ArrayList<Integer>> adj,int c,int d,boolean check,int[] visited)
    {
        Queue<Integer> q=new LinkedList<>();
        
        q.add(src);
        while(!q.isEmpty())
        {
            int node=q.poll();
            visited[node]=1;
            for(int next:adj.get(node))
            {
                if((check) &&((node==c && next==d )||( node==d && next==c)))
                   continue;
                if(visited[next]!=1)
                  q.add(next);
            }
        } 
    }
    static int isBridge(int V, ArrayList<ArrayList<Integer>> adj,int c,int d)
    {
        // code here
       
        
        int visited[]=new int[V];

//count no of disjoints before removing edge c-d
        Arrays.fill(visited,0);
        int disjointSets=0;
        for(int i=0;i<V;i++)
        {
            if(visited[i]==0)
            {
               bfs(i,adj,c,d,false,visited) ;
               disjointSets++;
            }
        }

     //count no of disjoints after removing edge c-d
        Arrays.fill(visited,0);
        int disjointSets2=0;
        for(int i=0;i<V;i++)
        {
            if(visited[i]==0)
              {
                  bfs(i,adj,c,d,true,visited) ;
                   disjointSets2++;
              }
        }

//compare them
        if(disjointSets!=disjointSets2)
              return 1;
        return 0;
    }
}
