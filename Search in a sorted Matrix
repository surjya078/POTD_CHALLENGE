Given a strictly sorted 2D matrix mat[][] of size n x m and a number x. Find whether the number x is present in the matrix or not.

Note: In a strictly sorted matrix, each row is sorted in strictly increasing order, and the first element of the ith row (i!=0) is greater than the last element of the (i-1)th row.

Examples:

Input: mat[][] = [[1, 5, 9], [14, 20, 21], [30, 34, 43]], x = 14
Output: true
Explanation: 14 is present in the matrix, so output is true.

Input: mat[][] = [[1, 5, 9, 11], [14, 20, 21, 26], [30, 34, 43, 50]], x = 42
Output: false
Explanation: 42 is not present in the matrix.

Input: mat[][] = [[87, 96, 99], [101, 103, 111]], x = 101
Output: true
Explanation: 101 is present in the matrix.


ANSWER :-

class Solution {
    // Function to search a given number in row-column sorted matrix.
    public boolean searchMatrix(int[][] mat, int x) {
        // code here
         int n=mat.length;
        int m=mat[0].length;
        
        int a=-1;
        for(int i=0;i<mat.length;i++){
            
            if(mat[i][0]<=x && mat[i][m-1]>=x){
                a=i;
                break;
            }
          
        }
    
        if(a==-1)return false;
        
        int i=0;
        int j=m-1;
        
        while(i<=j){
            int mid=(i+j)/2;
            if(mat[a][mid]==x)return true;
            else if(mat[a][mid]<x){
                i=mid+1;
            }
            else{
                j=mid-1;
            }
        }
        return false;
    }
}
