You are given an array of integer nums[] where each number represents a vote to a candidate. Return the candidates that have votes greater than one-third of the total votes, If there's not a majority vote, return -1. 

Note: The answer should be returned in an increasing format.

Examples:

Input: nums = [2, 1, 5, 5, 5, 5, 6, 6, 6, 6, 6]
Output: [5, 6]
Explanation: 5 and 6 occur more n/3 times.
Input: nums = [1, 2, 3, 4, 5]
Output: [-1]
Explanation: no candidate occur more than n/3 times.


ANSWER :-

class Solution {
    // Function to find the majority elements in the array
     public List<Integer> findMajority(List<Integer> nums) {
        // Your code goes here.
        List<Integer>res=new ArrayList<>();
        int cand1=0,cand2=0,count1=0,count2=0;
        for(int num:nums){
            if(num==cand1)count1++;
            else if(num==cand2)count2++;
            else if(count1==0){
                cand1=num;
                count1=1;
            }
            else if(count2==0){
            cand2=num;
            count2=1;
            }else{
                count1--;
                count2--;
            }
        }
      
        //validate cnd by their occurance
        count1=0;count2=0;
        for(int num:nums){
            if(num==cand1)count1++;
            else if(num==cand2)count2++;
        }
        //check cand occurs more than 3 times
        int n=nums.size();
        if(count1>n/3)res.add(cand1);
        if(count2>n/3)res.add(cand2);
        if(res.isEmpty())res.add(-1);
        return res;
    }
}
