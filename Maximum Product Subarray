Given an array arr[] that contains positive and negative integers (may contain 0 as well).
Find the maximum product that we can get in a subarray of arr.

Note: It is guaranteed that the output fits in a 32-bit integer.

Examples

Input: arr[] = [-2, 6, -3, -10, 0, 2]
Output: 180
Explanation: The subarray with maximum product is {6, -3, -10} with product = 6 * (-3) * (-10) = 180.

Input: arr[] = [-1, -3, -10, 0, 60]
Output: 60
Explanation: The subarray with maximum product is {60}.

Input: arr[] = [2, 3, 4] 
Output: 24 
Explanation: For an array with all positive elements, the result is product of all elements. 


ANSWER :-

class Solution {
    int maxProduct(int[] arr) {
        int max=Integer.MIN_VALUE;
        int pStart=1;
        int pEnd=1;
        for(int i=0; i<arr.length; i++){
            pStart*=arr[i];
            pEnd*=arr[arr.length-1-i];
            max=Math.max(max,Math.max(pStart,pEnd));
            if(pEnd==0) pEnd=1;
            if(pStart==0) pStart=1;
        }
        
        return max;
    }
}

