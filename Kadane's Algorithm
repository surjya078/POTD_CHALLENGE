Given an integer array arr[]. Find the contiguous sub-array(containing at least one number) that has the maximum sum and return its sum.

Examples:

Input: arr[] = [1, 2, 3, -2, 5]
Output: 9
Explanation: Max subarray sum is 9 of elements (1, 2, 3, -2, 5) which is a contiguous subarray.
Input: arr[] = [-1, -2, -3, -4]
Output: -1
Explanation: Max subarray sum is -1 of element (-1)
Input: arr[] = [5, 4, 7]
Output: 16
Explanation: Max subarray sum is 16 of element (5, 4, 7)

ANSWER :-

class Solution {

    // arr: input array
    // Function to find the sum of contiguous subarray with maximum sum.
    int maxSubarraySum(int[] arr) {

        // Your code here
        // Initialize maxSum to the smallest possible integer value
        int maxSum = Integer.MIN_VALUE;
        
        // Initialize localSum to 0
        int localSum = 0;
        
        // Iterate through each element in the array
        for (int i = 0; i < arr.length; i++) {
            // Add the current element to localSum
            localSum += arr[i];
        
            // Update maxSum if localSum is greater than maxSum
            if (localSum > maxSum) {
                maxSum = localSum;
            }
            
            // Reset localSum to 0 if it becomes negative
            if (localSum < 0) {
                localSum = 0;
            }
        }
        
        // Return the maximum sum found
        return maxSum;
    }
}
