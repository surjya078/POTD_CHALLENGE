Serialization is to store a tree in an array so that it can be later restored and deserialization is reading tree back from the array. Complete the functions

1. serialize() : stores the tree into an array a and returns the array.
2. deSerialize() : deserializes the array to the tree and returns the root of the tree.

Note: Multiple nodes can have the same data and the node values are always positive integers. Your code will be correct if the tree returned by
deSerialize(serialize(input_tree)) is same as the input tree. Driver code will print the in-order traversal of the tree returned by deSerialize(serialize(input_tree)).

Examples :

Input: root = [1, 2, 3]
       1
     /   \
    2     3
Output: [2, 1, 3]

Input: root = [10, 20, 30, 40, 60, N, N]
                10
              /    \
             20    30
            /   \
          40     60
Output: [40, 20, 60, 10, 30]


ANSWER :-

class Tree {
    // Function to serialize a tree and return a list containing nodes of tree.
   public ArrayList<Integer> serialize(Node root) {
        ArrayList<Integer> list = new ArrayList();
        Queue<Node> q = new LinkedList();
        q.offer(root);
        while(!q.isEmpty()) {
            Node node = q.poll();
            if(node!=null) {
                list.add(node.data);
                q.offer(node.left);
                q.offer(node.right);
            }
            else {
                list.add(-1);
            }   
        }
        return list;
    }

    // Function to deserialize a list and construct the tree.
    public Node deSerialize(ArrayList<Integer> arr) {
        // System.out.println(arr);
        if(arr.size()==0 || arr.get(0)==-1) return null;
        Queue<Node> q = new LinkedList();
        Queue<Node> q2 = new LinkedList();
        int i = 0;
        Node root = new Node(arr.get(i++)); 
        q.offer(root);
        while( i<arr.size() )  {
            if(!q.isEmpty()) {
                while(!q.isEmpty()) {
                    Node curr = q.poll();
                    int le = arr.get(i++);
                    int ri = arr.get(i++);
                    if(le==-1) {
                        curr.left = null;
                    } else {
                        Node left = new Node(le);
                        curr.left = left;
                        q2.offer(left);
                    }
                    if(ri==-1) {
                        curr.right = null;
                    } else {
                        Node right = new Node(ri);
                        curr.right = right;
                        q2.offer(right);
                    }
                }
            } else {
                while(!q2.isEmpty()) {
                    Node curr = q2.poll();
                    int le = arr.get(i++);
                    int ri = arr.get(i++);
                    if(le==-1) {
                        curr.left = null;
                    } else {
                        Node left = new Node(le);
                        curr.left = left;
                        q.offer(left);
                    }
                    if(ri==-1) {
                        curr.right = null;
                    } else {
                        Node right = new Node(ri);
                        curr.right = right;
                        q.offer(right);
                    }
                }
            }
        }
        return root;
    }
};
