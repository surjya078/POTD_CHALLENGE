Given an array arr[] of integers, the task is to count the number of ways to split given array 
elements into two non-empty subsets such that the XOR of elements of each group is 
equal. Each element should belong to exactly one subset.

Note:

1. The answer could be very large so print it by doing modulo with 109 + 7. 
2. Subsets with the same elements but derived from different indices are different.

Examples:

Input : arr[] = [1, 2, 3]
Output : 3
Explanation: {(1),(2, 3)}, {(2),(1, 3)}, {(3),(1, 2)} are three ways with equal XOR value of two groups.

Input : arr[] = [5, 2, 3, 2]
Output : 0
Explanation: No way to split into  two groups whose XOR is equal.

Input : arr[] = [2, 2, 2, 2]
Output : 7
Explanation: There are 7 ways to split the array into two groups with equal XOR, such that there are multiple combinations of {(2), (2,2,2)},{(2,2),(2,2)}.


ANSWER :-

class Solution {
    static final int MOD = 1000000007;

    public static int countgroup(int arr[]) {
        int n = arr.length;
        int xorAll = 0;
        for (int num : arr) {
            xorAll ^= num;
        }
        if (xorAll != 0) {
            return 0;
        }
        long result = 1;
        for (int i = 0; i < n -1; i++) {
            result = (result * 2) % MOD;
        }
 result = (result - 1 + MOD) % MOD;
        return (int) result;
    }
}

