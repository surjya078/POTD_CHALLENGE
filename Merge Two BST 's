Given two BSTs, return elements of merged BSTs in sorted form.

Examples :

Input:
BST1:
       5
     /   \
    3     6
   / \
  2   4  
BST2:
        2
      /   \
     1     3
            \
             7
            /
           6
Output: 1 2 2 3 3 4 5 6 6 7
Explanation: After merging and sorting the two BST we get 1 2 2 3 3 4 5 6 6 7.
Input:
BST1:
       12
     /   
    9
   / \    
  6   11
BST2:
      8
    /  \
   5    10
  /
 2
Output: 2 5 6 8 9 10 11 12
Explanation: After merging and sorting the two BST we get 2 5 6 8 9 10 11 12.


ANSWER :-


class Solution {
    // Function to return a list of integers denoting the node
    // values of both the BST in a sorted order.
    public List<Integer> merge(Node root1, Node root2) {
        // Write your code here
        ArrayList<Integer> list = new ArrayList<Integer>();
        trace(root1,list);
        trace(root2,list);
        Collections.sort(list);
        return list;
        
    }
    
    public void trace(Node root, ArrayList<Integer> list){
        if(root!=null)
        list.add(root.data);
        if(root.left!=null)
        trace(root.left,list);
        if(root.right!=null)
        trace(root.right,list);
    }
    
}
