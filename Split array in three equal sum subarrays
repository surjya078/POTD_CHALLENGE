Given an array, arr[], determine if arr can be split into
three consecutive parts such that the sum of each part is 
equal. If possible, return any index pair(i, j) in an array 
such that sum(arr[0..i]) = sum(arr[i+1..j]) = sum(arr[j+1..n-1]), 
otherwise return an array {-1,-1}.
 
Note: Driver code will print true if arr can be split into three equal sum subarrays, otherwise, it is false.

Examples : 

Input:  arr[] = [1, 3, 4, 0, 4]
Output: true
Explanation: [1, 2] is valid pair as sum of subarray 
arr[0..1] is equal to sum of subarray arr[2..3] and also to sum of subarray arr[4..4]. The sum is 4. 

Input: arr[] = [2, 3, 4]
Output: false
Explanation: No three subarrays exist which have equal sum.

Input: arr[] = [0, 1, 1]
Output: false


ANSWER :-

class Solution {
    // Function to determine if array arr can be split into three equal sum sets.
    public List<Integer> findSplit(int[] arr) {
        // code here
        int totalSum = 0;
        for (int num : arr) {
            totalSum += num;
        }
        if (totalSum % 3 != 0) {
            return Arrays.asList(-1, -1);
        }
        int targetSum = totalSum / 3;
        int n = arr.length;
        int currentSum = 0;
        int firstIndex = -1, secondIndex = -1;
        int partsFound = 0;
        for (int k = 0; k < n; k++) {
            currentSum += arr[k];
            if (currentSum == targetSum) {
                partsFound++;
                if (partsFound == 1) {
                    firstIndex = k; 
                } else if (partsFound == 2) {
                    secondIndex = k; 
                    break;
                }
                currentSum = 0;
            }
        }
        if (partsFound == 2 && secondIndex != -1) {
            return Arrays.asList(firstIndex, secondIndex + 1);
        }
        return Arrays.asList(-1, -1);
    }
}
