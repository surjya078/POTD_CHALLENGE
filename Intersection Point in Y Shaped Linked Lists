Given two singly linked lists, return the point where two linked lists intersect.

Note: If the linked lists do not merge at any point, return -1.

Examples:

Input: Linked list 1: 4->4->4->4->4, Linked list 2: 4->4->4

     4 
      \
       4
        \
         4     4
          \   /
            4
            |
            4


Output: 4
Explanation: From the above image, it is clearly seen that the common part is 4->4 whose starting point is 4.

Input: Linked list 1: 4->1->8->4->5, Linked List 2: 5->6->1->8->4->5

                 5
                /
     4         6
      \       /    
       1     1
        \   /
         8
          \
           4
           |
  

Output: 8
Explanation: From the above image, it is clearly seen that the common part is 8->4->5 whose starting point is 8.
Input: Linked list 1: 1->2->3, Linked list 2: 4->5->6
Output: -1
Explanation: There is no common part, so there is no interaction point.



ANSWER :-

class Intersect {
    // Function to find intersection point in Y shaped Linked Lists.
    int intersectPoint(Node head1, Node head2) {
        HashMap<Node,Integer> map = new HashMap<>();
        while(head1!=null){
            map.put(head1,head1.data);
            head1 = head1.next;
        }
        
        while(head2!=null){
            if(map.containsKey(head2)){
                return head2.data;
            }
            head2 = head2.next;
        }
        return -1;
        
    }
}
