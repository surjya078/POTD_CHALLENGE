Given a singly linked list's head. Your task is to complete the function alternatingSplitList()
that splits the given linked list into two smaller lists. The sublists should be made from alternating
elements from the original list.

Note: 

. The sublist should be in the order with respect to the original list.
. Your have to return an array containing the both sub-linked lists.

Examples:

Input: LinkedList = 0->1->0->1->0->1
Output: 0->0->0 , 1->1->1
Explanation: After forming two sublists of the given list as required,
we have two lists as: 0->0->0 and 1->1->1.

Input: LinkedList = 2->5->8->9->6
Output: 2->8->6 , 5->9
Explanation: After forming two sublists of the given list as required, we have
two lists as: 2->8->6 and 5->9.

Input: LinkedList: 7 
Output: 7 , <empty linked list>


ANSWER :-

class Solution {
    // Function to append a new node with newData at the end of a linked list
      Node[] alternatingSplitList(Node head) {
        // code here
         if (head == null) {
            return new Node[]{null, null};
        }

        // Pointers for two new lists
        Node head1 = null, head2 = null;
        Node tail1 = null, tail2 = null;

        // Index to determine alternation
        int index = 0;

        // Traverse the original list
        Node current = head;
        while (current != null) {
            if (index % 2 == 0) {
                // Add to the first list
                if (head1 == null) {
                    head1 = tail1 = new Node(current.data);
                } else {
                    tail1.next = new Node(current.data);
                    tail1 = tail1.next;
                }
            } else {
                // Add to the second list
                if (head2 == null) {
                    head2 = tail2 = new Node(current.data);
                } else {
                    tail2.next = new Node(current.data);
                    tail2 = tail2.next;
                }
            }
            // Move to the next node
            current = current.next;
            index++;
        }

        // Return the heads of both lists
        return new Node[]{head1, head2};
    }
}
