You are given a set of activities, each with a start time and a finish time, represented by the arrays start[] and finish[],
respectively. A single person can perform only one activity at a time, meaning no two activities can overlap. Your task is 
to determine the maximum number of activities that a person can complete in a day.

Examples:

Input: start[] = [1, 3, 0, 5, 8, 5], finish[] = [2, 4, 6, 7, 9, 9]
Output: 4
Explanation: A person can perform at most four activities. The maximum set of activities that can be executed is {0, 1, 3, 4}

Input: start[] = [10, 12, 20], finish[] = [20, 25, 30]
Output: 1
Explanation: A person can perform at most one activity.

Input: start[] = [1, 3, 2, 5], finish[] = [2, 4, 3, 6]
Output: 3
Explanation: A person can perform activities 0, 1 and 3.


ANSWER :-

class Solution {
 class pair implements Comparator<pair>{
        int s;
        int e;
        public pair(int s, int e){
            this.s=s;
            this.e=e;
        }
        public int compare(pair o1, pair o2){
            if(o1.e==o2.e){
                return o1.s-o2.s;
            }else return o1.e-o2.e;
        }
    }
    
    public int activitySelection(int[] start, int[] finish) {
        int n=start.length;
        pair arr[]=new pair[n];
        for(int i=0;i<n;i++){
            arr[i]=new pair(start[i], finish[i]);
        }
        
        Arrays.sort(arr, new pair(0, 0));
        
        int cnt=0;
        int end=Integer.MIN_VALUE;
        
        for(int i=0;i<n;i++){
            if(end<arr[i].s){
                cnt++;
                end=arr[i].e;
            }
        }
        return cnt;
    }
}
