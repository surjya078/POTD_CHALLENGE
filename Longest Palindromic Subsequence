Given a string s, return the length of the longest palindromic subsequence.

A subsequence is a sequence that can be derived from the given sequence by deleting some or no elements without changing the order of the remaining elements.

A palindromic sequence is a sequence that reads the same forward and backward.

Examples:

Input: s = "bbabcbcab"
Output: 7
Explanation: Subsequence "babcbab" is the longest subsequence which is also a palindrome.

Input: s = "abcd"
Output: 1
Explanation: "a", "b", "c" and "d" are palindromic and all have a length 1.

Input: s = "agbdba"
Output: 5
Explanation: The longest palindromic subsequence is "abdba", which has a length of 5. The characters in this subsequence are taken from the original string "agbdba",
and they maintain the order of the string while forming a palindrome.


ANSWER :-

class Solution {
    private static int[][] dp;
    private static int LCS(int i,int j,String s1,String s2){
        if(i==s1.length() || j==s2.length())return 0;
        if(dp[i][j]!=-1)return dp[i][j];
        if(s1.charAt(i)==s2.charAt(j)) return dp[i][j]=1+LCS(i+1,j+1,s1,s2);
        return dp[i][j]=Math.max(LCS(i+1,j,s1,s2),LCS(i,j+1,s1,s2));
    }
    public int longestPalinSubseq(String s1) {
        String s2 = new StringBuilder(s1).reverse().toString();
        int m=s1.length();
        int n=s2.length();
        dp=new int[m][n];
        for(int[] row:dp) Arrays.fill(row,-1);
        return LCS(0,0,s1,s2);
    }
}

