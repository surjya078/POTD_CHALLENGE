Given a boolean 2D array, consisting of only 1's and 0's, where each row is sorted. Return the 0-based index of the first row that has the most number of 1s. If no such row exists, return -1.

Examples:

Input: arr[][] = [[0, 1, 1, 1],
               [0, 0, 1, 1],
               [1, 1, 1, 1],
               [0, 0, 0, 0]]
Output: 2
Explanation: Row 2 contains 4 1's (0-based indexing).
Input: arr[][] = [[0, 0], 
               [1, 1]]
Output: 1
Explanation: Row 1 contains 2 1's (0-based indexing).

ANSWER :-


class Solution {
      public int rowWithMax1s(int arr[][]) {
        int index = -1; // Index of the row with maximum 1s
        int n = arr.length;
        int m = arr[0].length;
        int j = m - 1; // Start from the last column
        
        for (int i = 0; i < n; i++) {
            while (j >= 0 && arr[i][j] == 1) {
                j--; // Move left if you find a 1
                index = i; // Update index with the row number
            }
        }
        return index;
    }
}
