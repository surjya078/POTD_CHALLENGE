You are given weights and values of items, and put these items in a knapsack of capacity W to get the maximum total value in the knapsack. Note that we have only one quantity of each item.
In other words, given two integer arrays val and wt which represent values and weights associated with items respectively. Also given an integer W which represents knapsack capacity, find out the maximum sum values subset of val[] such that the sum of the weights of the corresponding subset is smaller than or equal to W. You cannot break an item, either pick the complete item or don't pick it (0-1 property).

Examples :

Input: W = 4, val[] = {1,2,3}, wt[] = {4,5,1}
Output: 3
Explanation: Choose the last item that weighs 1 unit and holds a value of 3. 
Input: W = 3, val[] = {1,2,3}, wt[] = {4,5,6}
Output: 0
Explanation: Every item has a weight exceeding the knapsack's capacity (3).

ANSWER :-
 
class Solution {
    // Function to return max value that can be put in knapsack of capacity W.
     static int knapSack(int W, int wt[], int val[]) {
        int n = val.length;
        
        // Create a 2D DP array
        int[][] dp = new int[n + 1][W + 1];

        // Iterate over all items
        for (int i = 0; i <= n; i++) {
            // Iterate over all possible capacities
            for (int w = 0; w <= W; w++) {
                if (i == 0 || w == 0) {
                    // Base case: If no items or no capacity, the value is 0
                    dp[i][w] = 0;
                } else if (wt[i - 1] <= w) {
                    // If the weight of the current item is less than or equal to the current capacity
                    dp[i][w] = Math.max(val[i - 1] + dp[i - 1][w - wt[i - 1]], dp[i - 1][w]);
                } else {
                    // If the weight of the current item is more than the current capacity, skip it
                    dp[i][w] = dp[i - 1][w];
                }
            }
        }

        // Return the maximum value that can be obtained
        return dp[n][W];
    }
}
