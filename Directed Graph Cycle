Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or not.

The graph is represented as a 2D vector edges[][], where each entry edges[i] = [u, v] denotes an edge from verticex u to v.

Input: V = 4, edges[][] = [[0, 1], [1, 2], [2, 3], [3, 3]]
Output: true
Explanation: 3 -> 3 is a cycle

Input: V = 3, edges[][] = [[0, 1], [1, 2]]
Output: false
Explanation: no cycle in the graph

ANSWER :-

class Solution {
    public boolean isCyclic(int V, int[][] edges) { 
        List<List<Integer>> graph = new ArrayList<>() ; 
        int[] indegree = new int[V] ; 
        for(int i = 0 ; i < V ; i++){
            graph.add(new ArrayList<>()); 
        }
        for(int i = 0 ; i < edges.length ; i++){
            int u = edges[i][0] ; 
            int v = edges[i][1] ; 
            graph.get(u).add(v) ; 
            indegree[v]++ ;
        }
        Queue<Integer> q = new LinkedList<>() ; 
        for(int i = 0 ; i < V ; i++){
            if(indegree[i] == 0){
                q.offer(i); 
            }
        }
        List<Integer> result = new ArrayList<>() ; 
        while(!q.isEmpty()){
            int node = q.poll() ; 
            result.add(node) ;
            for(int nbr : graph.get(node)){
                indegree[nbr]-- ; 
                if(indegree[nbr] == 0){
                    q.offer(nbr) ; 
                }
            }
        }
        return result.size() != V ; 
        
    }
}
