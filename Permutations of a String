Given a string s, which may contain duplicate characters, your task is to generate and return an array of all unique permutations of the string. You can return your answer in any order.

Examples:

Input: s = "ABC"
Output: ["ABC", "ACB", "BAC", "BCA", "CAB", "CBA"]
Explanation: Given string ABC has 6 unique permutations.

Input: s = "ABSG"
Output: ["ABGS", "ABSG", "AGBS", "AGSB", "ASBG", "ASGB", "BAGS", "BASG", "BGAS", "BGSA", "BSAG", "BSGA", "GABS", "GASB", "GBAS", "GBSA", "GSAB", "GSBA", "SABG", "SAGB", "SBAG", "SBGA", "SGAB", "SGBA"]
Explanation: Given string ABSG has 24 unique permutations.
 
Input: s = "AAA"
Output: ["AAA"]
Explanation: No other unique permutations can be formed as all the characters are same.


ANSWER :-

 class Solution {
    public ArrayList<String> findPermutation(String s) {
        // Set to store unique permutations
        Set<String> uniquePermutations = new HashSet<>();

        // Function to generate permutations
        permute(s, "", uniquePermutations);

        // Convert the set to a list
        ArrayList<String> result = new ArrayList<>(uniquePermutations);
        return result;
    }

    private void permute(String s, String prefix, Set<String> uniquePermutations) {
        // If the string is empty, add the prefix to the set
        if (s.length() == 0) {
            uniquePermutations.add(prefix);
            return;
        }

        for (int i = 0; i < s.length(); i++) {
            // Choose the current character and remove it from the remaining string
            char current = s.charAt(i);
            String remaining = s.substring(0, i) + s.substring(i + 1);

            // Recurse with the updated prefix and remaining string
            permute(remaining, prefix + current, uniquePermutations);
        }
    }

}
