You are given a rectangular matrix mat[][] of size n x m, and your task is to return an array while traversing the matrix in spiral form.

Examples:

Input: mat[][] = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
Output: [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]
Explanation: 

Input: mat[][] = [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18]]
Output: [1, 2, 3, 4, 5, 6, 12, 18, 17, 16, 15, 14, 13, 7, 8, 9, 10, 11]
Explanation: Applying same technique as shown above.
Input: mat[][] = [[32, 44, 27, 23], [54, 28, 50, 62]]
Output: [32, 44, 27, 23, 62, 50, 28, 54]
Explanation: Applying same technique as shown above, output will be [32, 44, 27, 23, 62, 50, 28, 54].


ANSWER :-

class Solution {
    public ArrayList<Integer> spirallyTraverse(int mat[][]) {
        // code here
        int n = mat.length, m = mat[0].length, total = n * m;
        int sr = 0, er = n - 1;
        int sc = 0, ec = m - 1;
        ArrayList<Integer> list = new ArrayList<>();
        
        while (list.size() < total) {
            for (int i = sc; i <= ec && list.size() < total; i++) list.add(mat[sr][i]);
            sr++;
            for (int i = sr; i <= er && list.size() < total; i++) list.add(mat[i][ec]);
            ec--;
            for (int i = ec; i >= sc && list.size() < total; i--) list.add(mat[er][i]);
            er--;
            for (int i = er; i >= sr && list.size() < total; i--) list.add(mat[i][sc]);
            sc++;
        }
        
        return list;
    }
}
