Given a square grid of size N, each cell of which contains an integer cost that represents a cost to traverse through that cell, we need to find a path from the top left cell to the bottom right cell by which the total cost incurred is minimum.
From the cell (i,j) we can go (i,j-1), (i, j+1), (i-1, j), (i+1, j).  

Examples :

Input: grid = {{9,4,9,9},{6,7,6,4},{8,3,3,7},{7,4,9,10}}
Output: 43
Explanation: The grid is-
9 4 9 9
6 7 6 4
8 3 3 7
7 4 9 10
The minimum cost is-
9 + 4 + 7 + 3 + 3 + 7 + 10 = 43.
Input: grid = {{4,4},{3,7}}
Output: 14
Explanation: The grid is-
4 4
3 7
The minimum cost is- 4 + 3 + 7 = 14.

ANSWER :-

class Solution
{
    //Function to return the minimum cost to react at bottom
	//right cell from top left cell.
   public int minimumCostPath(int[][] grid)
    {
        // Code here
        int m = grid.length , n = grid[0].length;
        int[][] mat = new int[m][n];
        if(m==1 && n==1)return grid[0][0];
        for(int i = 0 ; i<m ; i++){
            for(int j = 0 ; j<n ; j++){
                if(i==0 && j==0) mat[i][j] = grid[0][0];
                else if(i== 0) mat[i][j] =mat[i][j-1]+grid[i][j];
                else if(j== 0) mat[i][j] =mat[i-1][j]+grid[i][j];
                else{
                    mat[i][j] = Math.min(mat[i-1][j]+grid[i][j] ,mat[i][j-1]+ grid[i][j]);
                }
            }
        }
        return mat[m-1][n-1];
    }
}
